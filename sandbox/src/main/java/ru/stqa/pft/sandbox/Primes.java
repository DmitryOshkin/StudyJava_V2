package ru.stqa.pft.sandbox;

public class Primes {

  public static boolean isPrime(int n) {
    for (int i = 2; i < n; i++) {  //число i начиная с 2  и пока оно не станет равным n, увеличиваем на единицу. (i = i +1) принято писать как (i += 1) либо как операцию инкремента i++
      if (n % i == 0) {  // остаток от деления n  на  i сравниваем с 0
        return false;
      }
    }
    return true;
  }

  public static boolean isPrimeWhile(int n) {
    int i = 2;
    while (i < n) {                           // пока i не станет равна n
      if (n % i == 0) {  // проверяем остаток от деления n  на  i сравниваем с 0
        return false;
      }
      i++;                                    // увеличиваем на единицу и идем далее по циклу
    }
    return true;
  }
  /* Можно модифицировать проверку условия в цикле while */
  public static boolean isPrimeWhile2(int n) {
    int i = 2;
    while (i < n && n % i != 0) {                           // пока i меньше n и остаток от деления n на i не равен 0
      i++;                                    // увеличиваем на единицу и идем далее по циклу
    }
    return i == n;
  }
      /* Модификация метода с использованием типа данных long */
  public static boolean isPrime(long n) { // 64 битные числа
    for (long i = 2; i < n; i++) {  //число i начиная с 2  и пока оно не станет равным n, увеличиваем на единицу. (i = i +1) принято писать как (i += 1) либо как операцию инкремента i++
      if (n % i == 0) {  // остаток от деления n  на  i сравниваем с 0
        return false;
      }
    }
    return true;
  }
      /*Уменьшаем количество делителей в 2 раза так как делителей больше быть не может*/
  public static boolean isPrimeFast(int n) {
    for (int i = 2; i < n / 2; i++) {  //число i начиная с 2  и пока оно не станет равным n, увеличиваем на единицу. (i = i +1) принято писать как (i += 1) либо как операцию инкремента i++
      if (n % i == 0) {  // остаток от деления n  на  i сравниваем с 0
        return false;
      }
    }
    return true;
  }
  /*Уменьшаем количество делителей еще */
  public static boolean isPrimeMoreFast(int n) {
    int m =(int) Math.sqrt(n);                  // приводим значение выражения корень из n к типу int указывает его в скобках перед выражением
    for (int i = 2; i < m; i++) {  //число i начиная с 2  и пока оно не станет равным n, увеличиваем на единицу. (i = i +1) принято писать как (i += 1) либо как операцию инкремента i++
      if (n % i == 0) {  // остаток от деления n  на  i сравниваем с 0
        return false;
      }
    }
    return true;
  }
}
